#!/bin/bash
set -e

## Initialize Drude powered PICEC Installation

# Set to the appropriate site directory ##
SITE_DIRECTORY='default'
# Set to the appropriate site directory
SITE_DOMAIN='picec.drude'
# Set to the appropriate site alias for the DB source
#SOURCE_ALIAS='@none'

# Console colors
red='\033[0;31m'
green='\033[0;32m'
green_bg='\033[42m'
yellow='\033[1;33m'
NC='\033[0m'

echo-red () { echo -e "${red}$1${NC}"; }
echo-green () { echo -e "${green}$1${NC}"; }
echo-green-bg () { echo -e "${green_bg}$1${NC}"; }
echo-yellow () { echo -e "${yellow}$1${NC}"; }

# Check whether shell is interactive (otherwise we are running in a non-interactive script environment)
is_tty ()
{
	[[ "$(/usr/bin/tty || true)" != "not a tty" ]]
}

is_windows ()
{
	local res=$(uname | grep 'CYGWIN_NT')
	if [[ "$res" != "" ]]; then
		return 0
	else
		return 1
	fi
}

# Yes/no confirmation dialog with an optional message
# @param $1 confirmation message
_confirm ()
{
	# Skip checks if not a tty
	if ! is_tty ; then return 0; fi

	while true; do
		read -p "$1 [y/n]: " answer
		case $answer in
			[Yy]|[Yy][Ee][Ss] )
				break
				;;
			[Nn]|[Nn][Oo] )
				exit 1
				;;
			* )
				echo 'Please answer yes or no.'
		esac
	done
}

# Copy a settings file from $source to $dest
# Skips if the $dest already exists.
_copy_settings_file()
{
  local source=${1}
  local dest=${2}

  if [[ ! -f $dest ]]; then
    echo "Copying ${dest}..."
    cp "$source" "$dest"
  else
    echo-yellow "${dest} already in place"
  fi
}

# Copy settings files
init_settings ()
{
  cd "$GIT_ROOT"

  # docker-compose
  _copy_settings_file ".drude/drude-local-minimal.yml" "docker-compose.yml"
  
  # Drupal
  _copy_settings_file "docroot/sites/${SITE_DIRECTORY}/example.settings.local.php" "docroot/sites/${SITE_DIRECTORY}/settings.local.php"

}

# Install the site
# @param $1 site-name (domain)
site_install ()
{
  cd "$GIT_ROOT/docroot"

  local site_name=''
  if [[ $1 != '' ]]; then
    # Append site name to the argements list if provided
    site_name="--site-name='$1'"
  fi
  # We disable email sending here so site-install does not return an error
  dsh exec "PHP_OPTIONS="'"-d sendmail_path=`which true`"'" drush site-install picec -y ${site_name}"
}

add_demo_content ()
{
  cd "$GIT_ROOT/docroot"
  dsh exec "drush en picec_demo -y"
  dsh exec "drush mi CategoryXML"
  dsh exec "drush mi ProductXML"
}

# Misc drush commands to bring DB up-to-date
db_updates ()
{
  cd "$GIT_ROOT/docroot"
  echo-yellow "Applying DB updates..."
  set -x

  dsh drush -l ${SITE_DOMAIN} status
  dsh drush -l ${SITE_DOMAIN} updb -y
  dsh drush -l ${SITE_DOMAIN} fr-all -y
  dsh drush -l ${SITE_DOMAIN} cc all
  dsh drush -l ${SITE_DOMAIN} cron -v

  set +x
}

#-------------------------- Execution --------------------------------

# Set repo root as working directory.
GIT_ROOT=$(git rev-parse --show-toplevel)
if [[ -z "$GIT_ROOT" ]]; then
	echo-red "Git repository was not found"
	exit 1;
fi
cd "$GIT_ROOT"

# Project initialization steps
echo -e "${green_bg} Step 1 ${NC}${green} Initializing local project configuration...${NC}"
init_settings

if [[ $DOCKER_RUNNING == "true" ]]; then
  echo -e "${green_bg} Step 2 ${NC}${green} Recreating services...${NC}"
  dsh reset -f
else
  echo -e "${green_bg} Step 2 ${NC}${green} Creating services...${NC}"
  dsh up
fi

echo "Waiting 10s for MySQL to initialize...";
sleep 10

echo -e "${green_bg} Step 3 ${NC}${green} Installing PICEC...${NC}"
site_install "PICEC"

echo -e "${green_bg} Step 4 ${NC}${green} Adding demo content...${NC}"
add_demo_content

# Examples of other things that can be done.
#db_updates

echo -en "${green_bg} DONE! ${NC} "
echo -e "Open ${yellow}http://${SITE_DOMAIN}${NC} in your browser to verify the setup."
